/******************************************************************************

                            Online C Compiler.
                Code, Compile, Run and Debug C program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <stdio.h>
#include<stdlib.h>
typedef struct node{
    int val;
    struct node* next;
}Node;

Node* createNode(int v){
Node *temp=(Node*)malloc(sizeof(Node));
temp->val=v;
temp->next=NULL;
return temp;
}

Node * createList(int a[],int n){
    Node *head=NULL;
    Node *temp=NULL;
    int i=0;
    for(i=0;i<n;i++){
        if(head==NULL)
        {
            head=createNode(a[i]);
            temp=head;
        }
        else{
            while(temp->next!=NULL)
             temp=temp->next;
             
            temp->next=createNode(a[i]); 
        }
        
    }
    return head;
}

void printList(Node * head){
    printf("\n");
    if(head==NULL)
     printf("List is Empty");
    else{
        while(head!=NULL){
         printf("%d ",head->val);
         head=head->next;
        }
    } 
}


Node* merge(Node * head1,Node* head2){
    Node* newhead=NULL;
    Node* temp=head1;
    Node* temp1=NULL;
    while(temp!=NULL){
        if(newhead==NULL){
          newhead=createNode(temp->val);
          temp1=newhead;
        }
        else{
            while(temp1->next!=NULL)
            temp1=temp1->next;
        
           temp1->next=createNode(temp->val);    
        }
        temp=temp->next;
    }
    temp=head2;
    while(temp!=NULL){
        if(newhead==NULL){
          newhead=createNode(temp->val);
          temp1=newhead;
        }
        else{
            while(temp1->next!=NULL)
            temp1=temp1->next;
        
           temp1->next=createNode(temp->val);    
        }
        temp=temp->next;
            
    }
    
 return newhead;    
}


int main()
{
    int a[]={10,20,40,50};
    int b[]={60,70,80};
    Node* head1=createList(a,4);
    Node* head2=createList(b,3);
    printList(head1);
    printList(head2);
    printList(merge(head1,head2));
    //printList(head1);
    //printList(head2);
    return 0;
}
